#!/usr/bin/env node

/**
 * Module dependencies.
 */
const { Server } = require('socket.io');
var app = require('../app');
var debug = require('debug')('proyectonote:server');
var http = require('http');
const cors = require('cors');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

app.use(cors());
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server({
    cors: {
      origin: "http://localhost:5173"
    }
  });
  
  io.listen(4000);


var usuarios = [];


io.on('connection', (socket) => {    
    socket.on("mensaje", (msg) => {
        let mnd={
            user:socket.nick,
            uid:socket.uid,
            text:msg
        }
        socket.broadcast.emit("mensaje", mnd)
    })
    socket.on("imagen", (img) => {
        let mnd={
            user:socket.nick,
            uid:socket.uid,
            imagen:img
        }
        socket.broadcast.emit("imagen", mnd)
    })
    socket.on("usuario", (user) => {
        socket.nick = user;
    })
    socket.on("login",(usuario) => {
        socket.nick = usuario.email.split("@")[0]
        socket.uid = usuario.uid;
        let user = {
            id: socket.id,
            nick: socket.nick,
            uid: socket.uid,
            foto: "http://localhost:3000/images/default.webp"
        }
        usuarios.push(user)
        io.emit("newUser", usuarios);
        socket.on('disconnect', () => {
            let indiceUsuario = usuarios.findIndex(usuario => usuario.uid == socket.uid);
            if (indiceUsuario !== -1) {
                usuarios.splice(indiceUsuario, 1);
            }
            io.emit("newUser", usuarios);
        });
        socket.on("clickUser",(uid) => {
            let indiceUsuario = usuarios.findIndex(usuario => usuario.uid == uid);
            socket.emit("cambioUser",usuarios[indiceUsuario])
        })
        socket.on("mensajePrivado",(value) => {
            let mensaje = value.mensaje;
            let id = value.destinatarioId;
            let mnd={
                user:socket.nick,
                uid:socket.uid,
                text:mensaje
            }


            console.log("Mando")
            socket.to(id).emit('mensajePrivado', mnd);
        })
    })

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
