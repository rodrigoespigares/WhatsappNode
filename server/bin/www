#!/usr/bin/env node

/**
 * Module dependencies.
 */
const { Server } = require('socket.io');
var app = require('../app');
var debug = require('debug')('proyectonote:server');
var http = require('http');
const cors = require('cors');
const BASE_URL = "http://localhost:3000/";

const firebaseConfig = {
    apiKey: "AIzaSyAW6uezaGstSNL-q22838I1KjqMHwywezY",
    authDomain: "whatsappnode.firebaseapp.com",
    projectId: "whatsappnode",
    storageBucket: "whatsappnode.appspot.com",
    messagingSenderId: "747792821721",
    appId: "1:747792821721:web:8ddbe8db6a9d342144fdc8"
  };
  
  // Importa e inicializa Firebase
  const firebase = require('firebase/app');
  require('firebase/auth');
  require('firebase/firestore');
  
  firebase.initializeApp(firebaseConfig);
  
  // Accede a la instancia de Firestore
  const firestore = firebase.firestore();
  let userConf = [];
  function readConfigUserCollection() {
    const configUserCollectionURL = 'https://firestore.googleapis.com/v1/projects/whatsappnode/databases/(default)/documents/configUser';
    fetch(configUserCollectionURL)
    .then(response => response.json())
    .then(data => {
        data.documents.forEach(doc => {
        const cleanedData = {};
        Object.keys(doc.fields).forEach(field => {
            cleanedData[field] = doc.fields[field][Object.keys(doc.fields[field])[0]];
        });
        let userExiste = userConf.findIndex((element) => element.uid == cleanedData.uid)

        if(userExiste == -1){
            userConf.push(cleanedData);
        }
        });
    })
    .catch(error => {
        console.error('Error fetching data:', error);
    });
  }

  readConfigUserCollection();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

app.use(cors());
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// const io = new Server(server);
 const io = new Server({
    cors: {
      origin: "http://localhost:5173"
    }
  });
  
  io.listen(4000); 


let programacion = {
    id: "programacion",
    nick: "Programación",
    uid: "programacion",
    foto: BASE_URL+"images/programacion.jpg"
}


let futbol = {
    id: "futbol",
    nick: "Fútbol",
    uid: "futbol",
    foto: BASE_URL+"images/futbol.jpg"
}

var usuarios = [];
var grupos = [];

grupos.push(programacion);
grupos.push(futbol);

io.on('connection', (socket) => {    
    
    socket.on("login",(usuario) => {
        socket.uid = usuario.uid;
        readConfigUserCollection();
        let usuarioEncontrado = userConf.findIndex((element) => element.uid == socket.uid);
        if(usuarioEncontrado != -1){
            socket.nick = userConf[usuarioEncontrado].nick;
            socket.estado = userConf[usuarioEncontrado].estado;
            socket.foto = BASE_URL+userConf[usuarioEncontrado].foto;
        }else{
            socket.nick = usuario.email.split("@")[0]
            socket.estado = "Estoy usando WhatsApp!"
            socket.foto = BASE_URL+"images/default.webp"
            firestore.collection('configUser').add({
                uid: socket.uid,
                nick: socket.nick,
                estado: socket.estado,
                foto: "images/default.webp"
            })
            .then((docRef) => {
                console.log('Nuevo usuario agregado con ID:', docRef.id);
            })
            .catch((error) => {
                console.error('Error al agregar nuevo usuario:', error);
            });
            socket.emit("verConfig",true)
        }    
        let user = {
            id: socket.id,
            nick: socket.nick,
            uid: socket.uid,
            estado: socket.estado,
            foto: socket.foto
        }
        usuarios.push(user)
        io.emit("newUser", usuarios);
        io.emit("grupos", grupos);
        io.emit("conectado", user);
        socket.on('disconnect', () => {
            let indiceUsuario = usuarios.findIndex(usuario => usuario.uid == socket.uid);
            if (indiceUsuario !== -1) {
                usuarios.splice(indiceUsuario, 1);
            }
            io.emit("newUser", usuarios);
            socket.broadcast.emit("desconectado", user);
        });
        socket.on("cerrarSesion",() => {
            let indiceUsuario = usuarios.findIndex(usuario => usuario.uid == socket.uid);
            if (indiceUsuario !== -1) {
                usuarios.splice(indiceUsuario, 1);
            }
            io.emit("newUser", usuarios);
            socket.broadcast.emit("desconectado", user);
        })
        socket.on("verConfig",(value) => {
            socket.emit("verConfig",value)
        })
        socket.on("clickUser",(uid) => {
            let indiceUsuario = usuarios.findIndex(usuario => usuario.uid == uid);
            if(indiceUsuario>-1){
                socket.emit("cambioUser",usuarios[indiceUsuario])
                socket.grupo = false
            }else{
                let indiceSala = grupos.findIndex(grupos => grupos.uid == uid);
                if(indiceSala>-1){
                    socket.emit("cambioUser",grupos[indiceSala])
                    socket.join(grupos[indiceSala].id)
                    socket.grupo = true;
                    socket.nombre_grupo = grupos[indiceSala].nick
                    let mnd = {
                        user: user,
                        grupo: socket.nombre_grupo
                    }

                    socket.to(grupos[indiceSala].id).emit("conectGrupo",mnd)
                }else{
                    socket.emit("cambioUser",null)
                    socket.grupo = false
                }
            }
        })        
        socket.on("mensajePrivado",(value) => {
            let mensaje = value.mensaje;
            let id = value.destinatarioId;
            let mnd;
            if(socket.grupo){
                mnd={
                    grupo:socket.nombre_grupo,
                    user:socket.nick,
                    uid:socket.uid,
                    text:mensaje
                }
            }else{
                mnd={
                    user:socket.nick,
                    uid:socket.uid,
                    text:mensaje
                }
            }

            socket.to(id).emit('mensajePrivado', mnd);
        });
        socket.on("configurando", (value) => {
            
            let indiceUsuario = usuarios.findIndex(usuario => usuario.uid == socket.uid);
            if (indiceUsuario != -1) {
                usuarios.splice(indiceUsuario, 1);
            }
            user = {
                id: socket.id,
                nick: value.name,
                uid: socket.uid,
                estado: value.estado,
                foto: value.foto
            }
            

            usuarios.push(user);
            io.emit("newUser", usuarios);
            let foto = "";
            if(user.foto.startsWith("http")){
                foto = new URL(user.foto).pathname
            }
            let userMod={
                nick: value.name,
                uid: socket.uid,
                estado: value.estado,
                foto: foto
            }

            let userExiste = userConf.findIndex((element) => element.uid == user.uid)
            if (userExiste !=-1){
                userConf.splice(userExiste,1);
                userConf.push(userMod)
            }else if(userExiste == -1){
                userConf.push(userMod);
            }

            const userDocRef = firestore.collection('configUser').where('uid', '==', socket.uid);
            userDocRef.get()
              .then((querySnapshot) => {
                if (!querySnapshot.empty) {
                    
                  const docToUpdate = querySnapshot.docs[0];
                  foto = foto == "" ? user.foto : foto.substring(1);
                  return docToUpdate.ref.update({
                    nick: user.nick,
                    estado: user.estado,
                    foto: foto,
                  });
                }
              })
              .then(() => {
                console.log('Datos actualizados con éxito.');
              })
              .catch((error) => {
                console.error('Error al actualizar datos:', error);
              });
        })
        socket.on("escribiendo", (value) => {
            let mnd = {
                if: value,
                user: user
            }
            io.emit("escribiendo", mnd)
        })
        socket.on("imagen", (img) => {
            let mnd={
                user:socket.nick,
                uid:socket.uid,
                imagen:img
            }
            socket.broadcast.emit("imagen", mnd)
        });
        socket.on("archivo", (file) => {
            let mnd={
                user:socket.nick,
                uid:socket.uid,
                archivo:file
            }
            socket.broadcast.emit("archivo", mnd)
        });
        socket.on("mensaje", (msg) => {
            let mnd={
                user:socket.nick,
                uid:socket.uid,
                text:msg
            }
            socket.broadcast.emit("mensaje", mnd)
        });
    })

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
